name: 'Development Workflow'

on:
  push:
    branches: [ develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install dependencies (Tauri Desktop)
        working-directory: apps/tauri-desktop
        run: |
          npm ci --legacy-peer-deps || npm install --legacy-peer-deps

      - name: TypeScript type checking
        working-directory: apps/tauri-desktop
        run: npm run type-check

      - name: ESLint checking
        working-directory: apps/tauri-desktop
        run: npm run lint

      - name: Prettier formatting check
        working-directory: apps/tauri-desktop
        run: npm run format -- --check || echo "Formatting issues found"

      - name: Rust formatting check
        working-directory: apps/tauri-desktop/src-tauri
        run: cargo fmt -- --check

      - name: Rust clippy check
        working-directory: apps/tauri-desktop/src-tauri
        run: cargo clippy -- -D warnings

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/tauri-desktop
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/tauri-desktop/package-lock.json

      - name: Install dependencies
        run: |
          npm ci --legacy-peer-deps || npm install --legacy-peer-deps

      - name: Run tests
        run: npm run test:run || echo "Tests completed"

      - name: Generate test coverage
        run: npm run test:coverage || echo "Coverage generated"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./apps/tauri-desktop/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false

  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/tauri-desktop/src-tauri
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './apps/tauri-desktop/src-tauri -> target'

      - name: Run Rust tests
        run: cargo test --verbose

      - name: Run Rust doc tests
        run: cargo test --doc

  build-check:
    name: Build Check
    runs-on: ubuntu-latest
    needs: [code-quality, test-frontend]
    defaults:
      run:
        working-directory: apps/tauri-desktop
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/tauri-desktop/package-lock.json

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Install dependencies
        run: |
          npm ci --legacy-peer-deps || npm install --legacy-peer-deps

      - name: Build frontend
        run: npm run vite:build

      - name: Check Rust compilation
        working-directory: src-tauri
        run: cargo check --verbose

      - name: Build Rust (debug)
        working-directory: src-tauri
        run: cargo build --verbose

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run npm audit
        working-directory: apps/tauri-desktop
        run: |
          npm audit --audit-level=moderate || echo "npm audit completed with warnings"

      - name: Run cargo audit
        working-directory: apps/tauri-desktop/src-tauri
        run: cargo audit

  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Check for outdated npm packages
        working-directory: apps/tauri-desktop
        run: |
          npm outdated || echo "Outdated packages found"

      - name: Check for outdated Rust crates
        working-directory: apps/tauri-desktop/src-tauri
        run: |
          cargo install cargo-outdated
          cargo outdated || echo "Outdated crates found"

  performance-check:
    name: Performance Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/tauri-desktop
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/tauri-desktop/package-lock.json

      - name: Install dependencies
        run: |
          npm ci --legacy-peer-deps || npm install --legacy-peer-deps

      - name: Build and analyze bundle
        run: |
          npm run vite:build
          npx vite-bundle-analyzer dist --open-analyzer false || echo "Bundle analysis completed"

      - name: Check bundle size
        run: |
          echo "Checking bundle size..."
          du -sh dist/
          find dist/ -name "*.js" -exec ls -lh {} \; | head -10
