/**
 * BatchOperationsPanel ÂçïÂÖÉÊµãËØï
 * ÊµãËØïÊâπÈáèÊìç‰ΩúÈù¢ÊùøÁöÑÈÄâÊã©„ÄÅÊâßË°å„ÄÅÈîôËØØÂ§ÑÁêÜ„ÄÅËøõÂ∫¶ÊòæÁ§∫ÂíåÁî®Êà∑‰∫§‰∫íÂäüËÉΩ
 */

import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';
import { render, screen, fireEvent, waitFor, act } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { BatchOperationsPanel } from './BatchOperationsPanel';

// Ê®°ÊãüÊï∞ÊçÆÁ±ªÂûã
interface BatchItem {
  id: string;
  title: string;
  type: 'page' | 'block' | 'file';
  selected?: boolean;
  path?: string;
  size?: number;
  lastModified?: Date;
}

interface BatchOperation {
  id: string;
  name: string;
  description: string;
  icon: string;
  requiresConfirmation?: boolean;
  supportedTypes?: string[];
}

describe('BatchOperationsPanel', () => {
  // ÊµãËØïÊï∞ÊçÆ
  const mockItems: BatchItem[] = [
    {
      id: 'item1',
      title: 'ÊµãËØïÈ°µÈù¢1',
      type: 'page',
      path: '/test/page1',
      lastModified: new Date('2024-01-01')
    },
    {
      id: 'item2',
      title: 'ÊµãËØïÂùó1',
      type: 'block',
      path: '/test/block1',
      lastModified: new Date('2024-01-02')
    },
    {
      id: 'item3',
      title: 'ÊµãËØïÊñá‰ª∂1.md',
      type: 'file',
      path: '/test/file1.md',
      size: 1024,
      lastModified: new Date('2024-01-03')
    }
  ];

  const mockOperations: BatchOperation[] = [
    {
      id: 'delete',
      name: 'Âà†Èô§',
      description: 'Âà†Èô§ÈÄâ‰∏≠ÁöÑÈ°πÁõÆ',
      icon: 'üóëÔ∏è',
      requiresConfirmation: true
    },
    {
      id: 'move',
      name: 'ÁßªÂä®',
      description: 'ÁßªÂä®ÈÄâ‰∏≠ÁöÑÈ°πÁõÆÂà∞ÂÖ∂‰ªñ‰ΩçÁΩÆ',
      icon: 'üìÅ',
      requiresConfirmation: false
    },
    {
      id: 'copy',
      name: 'Â§çÂà∂',
      description: 'Â§çÂà∂ÈÄâ‰∏≠ÁöÑÈ°πÁõÆ',
      icon: 'üìã',
      requiresConfirmation: false
    },
    {
      id: 'export',
      name: 'ÂØºÂá∫',
      description: 'ÂØºÂá∫ÈÄâ‰∏≠ÁöÑÈ°πÁõÆ',
      icon: 'üì§',
      supportedTypes: ['page', 'file']
    }
  ];

  // MockÂõûË∞ÉÂáΩÊï∞
  const mockCallbacks = {
    onSelectionChange: vi.fn(),
    onOperationExecute: vi.fn(),
    onOperationComplete: vi.fn(),
    onOperationError: vi.fn(),
    onCancel: vi.fn()
  };

  const defaultProps = {
    items: mockItems,
    operations: mockOperations,
    selectedItems: [],
    isLoading: false,
    showProgress: false,
    progress: 0,
    ...mockCallbacks
  };

  beforeEach(() => {
    vi.clearAllMocks();
  });

  afterEach(() => {
    vi.restoreAllMocks();
  });

  describe('Âü∫Á°ÄÊ∏≤ÊüìÊµãËØï', () => {
    it('Â∫îËØ•Ê≠£Á°ÆÊ∏≤ÊüìÊâπÈáèÊìç‰ΩúÈù¢Êùø', () => {
      render(<BatchOperationsPanel {...defaultProps} />);
      
      // È™åËØÅ‰∏ªË¶ÅÂÖÉÁ¥†Â≠òÂú®
      expect(screen.getByText('üìã ÊâπÈáèÊìç‰Ωú')).toBeInTheDocument();
      expect(screen.getByText('ÈÄâÊã©È°πÁõÆËøõË°åÊâπÈáèÊìç‰Ωú')).toBeInTheDocument();
      expect(screen.getByText('ÂÖ®ÈÄâ')).toBeInTheDocument();
      expect(screen.getByText('ÂèñÊ∂àÈÄâÊã©')).toBeInTheDocument();
    });

    it('Â∫îËØ•ÊòæÁ§∫È°πÁõÆÂàóË°®', () => {
      render(<BatchOperationsPanel {...defaultProps} />);
      
      // È™åËØÅÈ°πÁõÆÊòæÁ§∫
      expect(screen.getByText('ÊµãËØïÈ°µÈù¢1')).toBeInTheDocument();
      expect(screen.getByText('ÊµãËØïÂùó1')).toBeInTheDocument();
      expect(screen.getByText('ÊµãËØïÊñá‰ª∂1.md')).toBeInTheDocument();
      
      // È™åËØÅÈ°πÁõÆÁ±ªÂûãÂõæÊ†á
      expect(screen.getByText('üìÑ')).toBeInTheDocument(); // page
      expect(screen.getByText('üß©')).toBeInTheDocument(); // block
      expect(screen.getByText('üìÑ')).toBeInTheDocument(); // file
    });

    it('Â∫îËØ•ÊòæÁ§∫Êìç‰ΩúÊåâÈíÆ', () => {
      render(<BatchOperationsPanel {...defaultProps} />);
      
      // È™åËØÅÊìç‰ΩúÊåâÈíÆ
      expect(screen.getByText('üóëÔ∏è Âà†Èô§')).toBeInTheDocument();
      expect(screen.getByText('üìÅ ÁßªÂä®')).toBeInTheDocument();
      expect(screen.getByText('üìã Â§çÂà∂')).toBeInTheDocument();
      expect(screen.getByText('üì§ ÂØºÂá∫')).toBeInTheDocument();
    });

    it('Â∫îËØ•Ê†πÊçÆÈÄâ‰∏≠Áä∂ÊÄÅÁ¶ÅÁî®Êìç‰ΩúÊåâÈíÆ', () => {
      render(<BatchOperationsPanel {...defaultProps} />);
      
      // Ê≤°ÊúâÈÄâ‰∏≠È°πÁõÆÊó∂ÔºåÊìç‰ΩúÊåâÈíÆÂ∫îËØ•Ë¢´Á¶ÅÁî®
      const deleteBtn = screen.getByText('üóëÔ∏è Âà†Èô§').closest('button');
      const moveBtn = screen.getByText('üìÅ ÁßªÂä®').closest('button');
      
      expect(deleteBtn).toBeDisabled();
      expect(moveBtn).toBeDisabled();
    });

    it('Â∫îËØ•ÊòæÁ§∫ÈÄâ‰∏≠È°πÁõÆÁªüËÆ°', () => {
      const propsWithSelection = {
        ...defaultProps,
        selectedItems: ['item1', 'item2']
      };
      
      render(<BatchOperationsPanel {...propsWithSelection} />);
      
      expect(screen.getByText('Â∑≤ÈÄâÊã© 2 ‰∏™È°πÁõÆ')).toBeInTheDocument();
    });
  });

  describe('È°πÁõÆÈÄâÊã©ÊµãËØï', () => {
    it('Â∫îËØ•Â§ÑÁêÜÂçï‰∏™È°πÁõÆÈÄâÊã©', async () => {
      render(<BatchOperationsPanel {...defaultProps} />);
      
      // ÁÇπÂáªÁ¨¨‰∏Ä‰∏™È°πÁõÆÁöÑÂ§çÈÄâÊ°Ü
      const checkbox = screen.getAllByRole('checkbox')[1]; // Á¨¨0‰∏™ÊòØÂÖ®ÈÄâÊ°Ü
      await userEvent.click(checkbox);
      
      expect(mockCallbacks.onSelectionChange).toHaveBeenCalledWith(['item1']);
    });

    it('Â∫îËØ•Â§ÑÁêÜÂÖ®ÈÄâÊìç‰Ωú', async () => {
      render(<BatchOperationsPanel {...defaultProps} />);
      
      const selectAllBtn = screen.getByText('ÂÖ®ÈÄâ');
      await userEvent.click(selectAllBtn);
      
      expect(mockCallbacks.onSelectionChange).toHaveBeenCalledWith(['item1', 'item2', 'item3']);
    });

    it('Â∫îËØ•Â§ÑÁêÜÂèñÊ∂àÈÄâÊã©Êìç‰Ωú', async () => {
      const propsWithSelection = {
        ...defaultProps,
        selectedItems: ['item1', 'item2']
      };
      
      render(<BatchOperationsPanel {...propsWithSelection} />);
      
      const clearSelectionBtn = screen.getByText('ÂèñÊ∂àÈÄâÊã©');
      await userEvent.click(clearSelectionBtn);
      
      expect(mockCallbacks.onSelectionChange).toHaveBeenCalledWith([]);
    });

    it('Â∫îËØ•Â§ÑÁêÜÂÖ®ÈÄâÂ§çÈÄâÊ°ÜÁä∂ÊÄÅ', async () => {
      const propsWithPartialSelection = {
        ...defaultProps,
        selectedItems: ['item1']
      };
      
      render(<BatchOperationsPanel {...propsWithPartialSelection} />);
      
      const selectAllCheckbox = screen.getAllByRole('checkbox')[0];
      
      // ÈÉ®ÂàÜÈÄâÊã©Áä∂ÊÄÅÂ∫îËØ•ÊòæÁ§∫‰∏∫indeterminate
      expect(selectAllCheckbox).toHaveProperty('indeterminate', true);
    });

    it('Â∫îËØ•Âú®ÂÖ®ÈÉ®ÈÄâ‰∏≠Êó∂ÊòæÁ§∫ÂÖ®ÈÄâÁä∂ÊÄÅ', () => {
      const propsWithFullSelection = {
        ...defaultProps,
        selectedItems: ['item1', 'item2', 'item3']
      };
      
      render(<BatchOperationsPanel {...propsWithFullSelection} />);
      
      const selectAllCheckbox = screen.getAllByRole('checkbox')[0];
      expect(selectAllCheckbox).toBeChecked();
    });
  });

  describe('ÊâπÈáèÊìç‰ΩúÊâßË°åÊµãËØï', () => {
    it('Â∫îËØ•ÊâßË°å‰∏çÈúÄË¶ÅÁ°ÆËÆ§ÁöÑÊìç‰Ωú', async () => {
      const propsWithSelection = {
        ...defaultProps,
        selectedItems: ['item1', 'item2']
      };
      
      render(<BatchOperationsPanel {...propsWithSelection} />);
      
      const copyBtn = screen.getByText('üìã Â§çÂà∂');
      await userEvent.click(copyBtn);
      
      expect(mockCallbacks.onOperationExecute).toHaveBeenCalledWith('copy', ['item1', 'item2']);
    });

    it('Â∫îËØ•ÊòæÁ§∫Á°ÆËÆ§ÂØπËØùÊ°ÜÂØπ‰∫éÈúÄË¶ÅÁ°ÆËÆ§ÁöÑÊìç‰Ωú', async () => {
      const propsWithSelection = {
        ...defaultProps,
        selectedItems: ['item1']
      };
      
      render(<BatchOperationsPanel {...propsWithSelection} />);
      
      const deleteBtn = screen.getByText('üóëÔ∏è Âà†Èô§');
      await userEvent.click(deleteBtn);
      
      // È™åËØÅÁ°ÆËÆ§ÂØπËØùÊ°ÜÊòæÁ§∫
      expect(screen.getByText('Á°ÆËÆ§Âà†Èô§')).toBeInTheDocument();
      expect(screen.getByText('Á°ÆÂÆöË¶ÅÂà†Èô§ÈÄâ‰∏≠ÁöÑ 1 ‰∏™È°πÁõÆÂêóÔºüÊ≠§Êìç‰Ωú‰∏çÂèØÊí§ÈîÄ„ÄÇ')).toBeInTheDocument();
      expect(screen.getByText('Á°ÆËÆ§')).toBeInTheDocument();
      expect(screen.getByText('ÂèñÊ∂à')).toBeInTheDocument();
    });

    it('Â∫îËØ•Âú®Á°ÆËÆ§ÂêéÊâßË°åÂà†Èô§Êìç‰Ωú', async () => {
      const propsWithSelection = {
        ...defaultProps,
        selectedItems: ['item1']
      };
      
      render(<BatchOperationsPanel {...propsWithSelection} />);
      
      const deleteBtn = screen.getByText('üóëÔ∏è Âà†Èô§');
      await userEvent.click(deleteBtn);
      
      const confirmBtn = screen.getByText('Á°ÆËÆ§');
      await userEvent.click(confirmBtn);
      
      expect(mockCallbacks.onOperationExecute).toHaveBeenCalledWith('delete', ['item1']);
    });

    it('Â∫îËØ•Âú®ÂèñÊ∂àÁ°ÆËÆ§Êó∂‰∏çÊâßË°åÊìç‰Ωú', async () => {
      const propsWithSelection = {
        ...defaultProps,
        selectedItems: ['item1']
      };
      
      render(<BatchOperationsPanel {...propsWithSelection} />);
      
      const deleteBtn = screen.getByText('üóëÔ∏è Âà†Èô§');
      await userEvent.click(deleteBtn);
      
      const cancelBtn = screen.getByText('ÂèñÊ∂à');
      await userEvent.click(cancelBtn);
      
      expect(mockCallbacks.onOperationExecute).not.toHaveBeenCalled();
      expect(screen.queryByText('Á°ÆËÆ§Âà†Èô§')).not.toBeInTheDocument();
    });

    it('Â∫îËØ•Ê†πÊçÆÊîØÊåÅÁöÑÁ±ªÂûãËøáÊª§Êìç‰Ωú', () => {
      const propsWithFileSelection = {
        ...defaultProps,
        selectedItems: ['item2'] // blockÁ±ªÂûã
      };
      
      render(<BatchOperationsPanel {...propsWithFileSelection} />);
      
      // ÂØºÂá∫Êìç‰ΩúÂè™ÊîØÊåÅpageÂíåfileÁ±ªÂûãÔºåÊâÄ‰ª•Â∫îËØ•Ë¢´Á¶ÅÁî®
      const exportBtn = screen.getByText('üì§ ÂØºÂá∫').closest('button');
      expect(exportBtn).toBeDisabled();
    });
  });

  describe('Âä†ËΩΩÂíåËøõÂ∫¶Áä∂ÊÄÅÊµãËØï', () => {
    it('Â∫îËØ•ÊòæÁ§∫Âä†ËΩΩÁä∂ÊÄÅ', () => {
      const propsWithLoading = {
        ...defaultProps,
        isLoading: true
      };
      
      render(<BatchOperationsPanel {...propsWithLoading} />);
      
      expect(screen.getByText('Ê≠£Âú®Â§ÑÁêÜ...')).toBeInTheDocument();
      
      // Êìç‰ΩúÊåâÈíÆÂ∫îËØ•Ë¢´Á¶ÅÁî®
      const deleteBtn = screen.getByText('üóëÔ∏è Âà†Èô§').closest('button');
      expect(deleteBtn).toBeDisabled();
    });

    it('Â∫îËØ•ÊòæÁ§∫ËøõÂ∫¶Êù°', () => {
      const propsWithProgress = {
        ...defaultProps,
        showProgress: true,
        progress: 50
      };
      
      render(<BatchOperationsPanel {...propsWithProgress} />);
      
      expect(screen.getByText('ËøõÂ∫¶: 50%')).toBeInTheDocument();
      
      const progressBar = screen.getByRole('progressbar');
      expect(progressBar).toHaveAttribute('value', '50');
    });

    it('Â∫îËØ•Âú®ÂÆåÊàêÊó∂ÈöêËóèËøõÂ∫¶Êù°', () => {
      const propsWithCompleteProgress = {
        ...defaultProps,
        showProgress: true,
        progress: 100
      };
      
      const { rerender } = render(<BatchOperationsPanel {...propsWithCompleteProgress} />);
      
      expect(screen.getByText('ËøõÂ∫¶: 100%')).toBeInTheDocument();
      
      // Ê®°ÊãüÊìç‰ΩúÂÆåÊàêÂêéÈöêËóèËøõÂ∫¶
      rerender(<BatchOperationsPanel {...defaultProps} showProgress={false} progress={0} />);
      
      expect(screen.queryByText('ËøõÂ∫¶:')).not.toBeInTheDocument();
    });
  });

  describe('ÈîôËØØÂ§ÑÁêÜÊµãËØï', () => {
    it('Â∫îËØ•ÊòæÁ§∫ÈîôËØØÊ∂àÊÅØ', () => {
      const propsWithError = {
        ...defaultProps,
        error: 'Êìç‰ΩúÂ§±Ë¥•ÔºöÁΩëÁªúËøûÊé•ÈîôËØØ'
      };
      
      render(<BatchOperationsPanel {...propsWithError} />);
      
      expect(screen.getByText('‚ö†Ô∏è Êìç‰ΩúÂ§±Ë¥•ÔºöÁΩëÁªúËøûÊé•ÈîôËØØ')).toBeInTheDocument();
    });

    it('Â∫îËØ•Êèê‰æõÈáçËØïÊåâÈíÆ', async () => {
      const propsWithError = {
        ...defaultProps,
        error: 'Êìç‰ΩúÂ§±Ë¥•',
        onRetry: vi.fn()
      };
      
      render(<BatchOperationsPanel {...propsWithError} />);
      
      const retryBtn = screen.getByText('ÈáçËØï');
      await userEvent.click(retryBtn);
      
      expect(propsWithError.onRetry).toHaveBeenCalled();
    });

    it('Â∫îËØ•Êèê‰æõÂÖ≥Èó≠ÈîôËØØÊ∂àÊÅØÁöÑÂäüËÉΩ', async () => {
      const propsWithError = {
        ...defaultProps,
        error: 'Êìç‰ΩúÂ§±Ë¥•',
        onErrorDismiss: vi.fn()
      };
      
      render(<BatchOperationsPanel {...propsWithError} />);
      
      const dismissBtn = screen.getByTitle('ÂÖ≥Èó≠ÈîôËØØÊ∂àÊÅØ');
      await userEvent.click(dismissBtn);
      
      expect(propsWithError.onErrorDismiss).toHaveBeenCalled();
    });
  });

  describe('ÊÄßËÉΩÊµãËØï', () => {
    it('Â∫îËØ•Âø´ÈÄüÊ∏≤ÊüìÁªÑ‰ª∂', () => {
      const startTime = performance.now();
      
      render(<BatchOperationsPanel {...defaultProps} />);
      
      const endTime = performance.now();
      const renderTime = endTime - startTime;
      
      // È™åËØÅÊ∏≤ÊüìÊó∂Èó¥Â∞è‰∫é50ms
      expect(renderTime).toBeLessThan(50);
    });

    it('Â∫îËØ•Â§ÑÁêÜÂ§ßÈáèÈ°πÁõÆ', () => {
      // ÂàõÂª∫Â§ßÈáèÈ°πÁõÆ
      const largeItemList: BatchItem[] = Array.from({ length: 1000 }, (_, i) => ({
        id: `item${i}`,
        title: `È°πÁõÆ${i}`,
        type: 'page' as const,
        path: `/test/item${i}`
      }));
      
      const propsWithLargeList = {
        ...defaultProps,
        items: largeItemList
      };
      
      const startTime = performance.now();
      
      render(<BatchOperationsPanel {...propsWithLargeList} />);
      
      const endTime = performance.now();
      const renderTime = endTime - startTime;
      
      // È™åËØÅÂ§ßÈáèÊï∞ÊçÆÊ∏≤ÊüìÊó∂Èó¥ÂêàÁêÜ
      expect(renderTime).toBeLessThan(200);
      
      // È™åËØÅËôöÊãüÂåñÊàñÂàÜÈ°µÂ∑•‰ΩúÊ≠£Â∏∏
      expect(screen.getByText('È°πÁõÆ0')).toBeInTheDocument();
    });
  });

  describe('ÈîÆÁõò‰∫§‰∫íÊµãËØï', () => {
    it('Â∫îËØ•ÊîØÊåÅÈîÆÁõòÂØºËà™', async () => {
      render(<BatchOperationsPanel {...defaultProps} />);

      // TabÈîÆÂØºËà™Âà∞Á¨¨‰∏Ä‰∏™È°πÁõÆ
      await userEvent.tab();
      await userEvent.tab();

      // Á©∫Ê†ºÈîÆÈÄâÊã©È°πÁõÆ
      await userEvent.keyboard(' ');

      expect(mockCallbacks.onSelectionChange).toHaveBeenCalledWith(['item1']);
    });

    it('Â∫îËØ•ÊîØÊåÅCtrl+AÂÖ®ÈÄâ', async () => {
      render(<BatchOperationsPanel {...defaultProps} />);

      await userEvent.keyboard('{Control>}a{/Control}');

      expect(mockCallbacks.onSelectionChange).toHaveBeenCalledWith(['item1', 'item2', 'item3']);
    });

    it('Â∫îËØ•ÊîØÊåÅDeleteÈîÆÂà†Èô§', async () => {
      const propsWithSelection = {
        ...defaultProps,
        selectedItems: ['item1']
      };

      render(<BatchOperationsPanel {...propsWithSelection} />);

      await userEvent.keyboard('{Delete}');

      // Â∫îËØ•ÊòæÁ§∫Á°ÆËÆ§ÂØπËØùÊ°Ü
      expect(screen.getByText('Á°ÆËÆ§Âà†Èô§')).toBeInTheDocument();
    });

    it('Â∫îËØ•ÊîØÊåÅEscapeÈîÆÂèñÊ∂àÊìç‰Ωú', async () => {
      const propsWithSelection = {
        ...defaultProps,
        selectedItems: ['item1']
      };

      render(<BatchOperationsPanel {...propsWithSelection} />);

      // ÊâìÂºÄÂà†Èô§Á°ÆËÆ§ÂØπËØùÊ°Ü
      const deleteBtn = screen.getByText('üóëÔ∏è Âà†Èô§');
      await userEvent.click(deleteBtn);

      // EscapeÈîÆÂèñÊ∂à
      await userEvent.keyboard('{Escape}');

      expect(screen.queryByText('Á°ÆËÆ§Âà†Èô§')).not.toBeInTheDocument();
    });
  });

  describe('ÊãñÊãΩÊìç‰ΩúÊµãËØï', () => {
    it('Â∫îËØ•ÊîØÊåÅÊãñÊãΩÈÄâÊã©Â§ö‰∏™È°πÁõÆ', async () => {
      render(<BatchOperationsPanel {...defaultProps} />);

      // Ê®°ÊãüÊãñÊãΩÈÄâÊã©ÔºàËøôÈáåÁÆÄÂåñ‰∏∫ÁÇπÂáªÂ§ö‰∏™È°πÁõÆÔºâ
      const checkboxes = screen.getAllByRole('checkbox').slice(1); // ÊéíÈô§ÂÖ®ÈÄâÊ°Ü

      // Êåâ‰ΩèCtrlÁÇπÂáªÂ§ö‰∏™È°πÁõÆ
      await userEvent.click(checkboxes[0], { ctrlKey: true });
      await userEvent.click(checkboxes[1], { ctrlKey: true });

      expect(mockCallbacks.onSelectionChange).toHaveBeenCalledTimes(2);
    });

    it('Â∫îËØ•ÊîØÊåÅShiftÁÇπÂáªËåÉÂõ¥ÈÄâÊã©', async () => {
      render(<BatchOperationsPanel {...defaultProps} />);

      const checkboxes = screen.getAllByRole('checkbox').slice(1);

      // ÁÇπÂáªÁ¨¨‰∏Ä‰∏™È°πÁõÆ
      await userEvent.click(checkboxes[0]);

      // Shift+ÁÇπÂáªÁ¨¨‰∏â‰∏™È°πÁõÆÔºåÂ∫îËØ•ÈÄâÊã©ËåÉÂõ¥
      await userEvent.click(checkboxes[2], { shiftKey: true });

      expect(mockCallbacks.onSelectionChange).toHaveBeenLastCalledWith(['item1', 'item2', 'item3']);
    });
  });

  describe('ËøáÊª§ÂíåÊêúÁ¥¢ÊµãËØï', () => {
    it('Â∫îËØ•ÊîØÊåÅÊåâÁ±ªÂûãËøáÊª§È°πÁõÆ', async () => {
      const propsWithFilter = {
        ...defaultProps,
        showFilter: true
      };

      render(<BatchOperationsPanel {...propsWithFilter} />);

      // ÈÄâÊã©Âè™ÊòæÁ§∫È°µÈù¢Á±ªÂûã
      const typeFilter = screen.getByLabelText('Á±ªÂûãËøáÊª§');
      await userEvent.selectOptions(typeFilter, 'page');

      // Â∫îËØ•Âè™ÊòæÁ§∫È°µÈù¢Á±ªÂûãÁöÑÈ°πÁõÆ
      expect(screen.getByText('ÊµãËØïÈ°µÈù¢1')).toBeInTheDocument();
      expect(screen.queryByText('ÊµãËØïÂùó1')).not.toBeInTheDocument();
      expect(screen.queryByText('ÊµãËØïÊñá‰ª∂1.md')).not.toBeInTheDocument();
    });

    it('Â∫îËØ•ÊîØÊåÅÊêúÁ¥¢È°πÁõÆ', async () => {
      const propsWithSearch = {
        ...defaultProps,
        showSearch: true
      };

      render(<BatchOperationsPanel {...propsWithSearch} />);

      const searchInput = screen.getByPlaceholderText('ÊêúÁ¥¢È°πÁõÆ...');
      await userEvent.type(searchInput, 'È°µÈù¢');

      // Â∫îËØ•Âè™ÊòæÁ§∫ÂåπÈÖçÁöÑÈ°πÁõÆ
      expect(screen.getByText('ÊµãËØïÈ°µÈù¢1')).toBeInTheDocument();
      expect(screen.queryByText('ÊµãËØïÂùó1')).not.toBeInTheDocument();
    });

    it('Â∫îËØ•ÊîØÊåÅÊ∏ÖÈô§ÊêúÁ¥¢', async () => {
      const propsWithSearch = {
        ...defaultProps,
        showSearch: true
      };

      render(<BatchOperationsPanel {...propsWithSearch} />);

      const searchInput = screen.getByPlaceholderText('ÊêúÁ¥¢È°πÁõÆ...');
      await userEvent.type(searchInput, 'È°µÈù¢');

      const clearBtn = screen.getByTitle('Ê∏ÖÈô§ÊêúÁ¥¢');
      await userEvent.click(clearBtn);

      expect(searchInput).toHaveValue('');
      expect(screen.getByText('ÊµãËØïÂùó1')).toBeInTheDocument();
    });
  });

  describe('ÊéíÂ∫èÂäüËÉΩÊµãËØï', () => {
    it('Â∫îËØ•ÊîØÊåÅÊåâÂêçÁß∞ÊéíÂ∫è', async () => {
      const propsWithSort = {
        ...defaultProps,
        showSort: true
      };

      render(<BatchOperationsPanel {...propsWithSort} />);

      const sortSelect = screen.getByLabelText('ÊéíÂ∫èÊñπÂºè');
      await userEvent.selectOptions(sortSelect, 'name-asc');

      // È™åËØÅÊéíÂ∫èÂõûË∞ÉË¢´Ë∞ÉÁî®
      expect(mockCallbacks.onSortChange).toHaveBeenCalledWith('name-asc');
    });

    it('Â∫îËØ•ÊîØÊåÅÊåâ‰øÆÊîπÊó∂Èó¥ÊéíÂ∫è', async () => {
      const propsWithSort = {
        ...defaultProps,
        showSort: true,
        onSortChange: vi.fn()
      };

      render(<BatchOperationsPanel {...propsWithSort} />);

      const sortSelect = screen.getByLabelText('ÊéíÂ∫èÊñπÂºè');
      await userEvent.selectOptions(sortSelect, 'modified-desc');

      expect(propsWithSort.onSortChange).toHaveBeenCalledWith('modified-desc');
    });
  });

  describe('‰∏ä‰∏ãÊñáËèúÂçïÊµãËØï', () => {
    it('Â∫îËØ•ÊòæÁ§∫Âè≥ÈîÆ‰∏ä‰∏ãÊñáËèúÂçï', async () => {
      render(<BatchOperationsPanel {...defaultProps} />);

      const firstItem = screen.getByText('ÊµãËØïÈ°µÈù¢1');
      await userEvent.pointer({ keys: '[MouseRight]', target: firstItem });

      // È™åËØÅ‰∏ä‰∏ãÊñáËèúÂçïÊòæÁ§∫
      expect(screen.getByText('ÈÄâÊã©')).toBeInTheDocument();
      expect(screen.getByText('Â§çÂà∂')).toBeInTheDocument();
      expect(screen.getByText('Âà†Èô§')).toBeInTheDocument();
    });

    it('Â∫îËØ•Âú®‰∏ä‰∏ãÊñáËèúÂçï‰∏≠ÊâßË°åÊìç‰Ωú', async () => {
      render(<BatchOperationsPanel {...defaultProps} />);

      const firstItem = screen.getByText('ÊµãËØïÈ°µÈù¢1');
      await userEvent.pointer({ keys: '[MouseRight]', target: firstItem });

      const selectMenuItem = screen.getByText('ÈÄâÊã©');
      await userEvent.click(selectMenuItem);

      expect(mockCallbacks.onSelectionChange).toHaveBeenCalledWith(['item1']);
    });
  });

  describe('Êó†ÈöúÁ¢çÊÄßÊµãËØï', () => {
    it('Â∫îËØ•Êèê‰æõÊ≠£Á°ÆÁöÑARIAÊ†áÁ≠æ', () => {
      render(<BatchOperationsPanel {...defaultProps} />);

      // È™åËØÅ‰∏ªË¶ÅÂå∫ÂüüÁöÑARIAÊ†áÁ≠æ
      expect(screen.getByRole('region', { name: 'ÊâπÈáèÊìç‰ΩúÈù¢Êùø' })).toBeInTheDocument();
      expect(screen.getByRole('group', { name: 'È°πÁõÆÂàóË°®' })).toBeInTheDocument();
      expect(screen.getByRole('group', { name: 'Êìç‰ΩúÊåâÈíÆ' })).toBeInTheDocument();
    });

    it('Â∫îËØ•Êèê‰æõÈîÆÁõòÁÑ¶ÁÇπÊåáÁ§∫', async () => {
      render(<BatchOperationsPanel {...defaultProps} />);

      // TabÂà∞Á¨¨‰∏Ä‰∏™ÂèØËÅöÁÑ¶ÂÖÉÁ¥†
      await userEvent.tab();

      const focusedElement = document.activeElement;
      expect(focusedElement).toHaveClass('focusable');
    });

    it('Â∫îËØ•Êèê‰æõÂ±èÂπïÈòÖËØªÂô®ÊîØÊåÅ', () => {
      const propsWithSelection = {
        ...defaultProps,
        selectedItems: ['item1', 'item2']
      };

      render(<BatchOperationsPanel {...propsWithSelection} />);

      // È™åËØÅÂ±èÂπïÈòÖËØªÂô®ÂÖ¨Âëä
      expect(screen.getByText('Â∑≤ÈÄâÊã© 2 ‰∏™È°πÁõÆ')).toHaveAttribute('aria-live', 'polite');
    });
  });

  describe('ËæπÁïåÊÉÖÂÜµÊµãËØï', () => {
    it('Â∫îËØ•Â§ÑÁêÜÁ©∫È°πÁõÆÂàóË°®', () => {
      const propsWithEmptyList = {
        ...defaultProps,
        items: []
      };

      render(<BatchOperationsPanel {...propsWithEmptyList} />);

      expect(screen.getByText('Ê≤°ÊúâÂèØÊìç‰ΩúÁöÑÈ°πÁõÆ')).toBeInTheDocument();
      expect(screen.getByText('ÂÖ®ÈÄâ').closest('button')).toBeDisabled();
    });

    it('Â∫îËØ•Â§ÑÁêÜÊó†Êìç‰ΩúÊùÉÈôê', () => {
      const propsWithoutPermissions = {
        ...defaultProps,
        operations: [],
        readOnly: true
      };

      render(<BatchOperationsPanel {...propsWithoutPermissions} />);

      expect(screen.getByText('Âè™ËØªÊ®°Âºè')).toBeInTheDocument();
      expect(screen.queryByText('üóëÔ∏è Âà†Èô§')).not.toBeInTheDocument();
    });

    it('Â∫îËØ•Â§ÑÁêÜÁΩëÁªúÈîôËØØÈáçËØï', async () => {
      const propsWithNetworkError = {
        ...defaultProps,
        error: 'ÁΩëÁªúËøûÊé•Â§±Ë¥•',
        onRetry: vi.fn()
      };

      render(<BatchOperationsPanel {...propsWithNetworkError} />);

      const retryBtn = screen.getByText('ÈáçËØï');
      await userEvent.click(retryBtn);

      expect(propsWithNetworkError.onRetry).toHaveBeenCalled();
    });

    it('Â∫îËØ•Â§ÑÁêÜÊìç‰ΩúË∂ÖÊó∂', () => {
      const propsWithTimeout = {
        ...defaultProps,
        isLoading: true,
        operationTimeout: true
      };

      render(<BatchOperationsPanel {...propsWithTimeout} />);

      expect(screen.getByText('Êìç‰ΩúË∂ÖÊó∂')).toBeInTheDocument();
      expect(screen.getByText('ÂèñÊ∂àÊìç‰Ωú')).toBeInTheDocument();
    });
  });
});
