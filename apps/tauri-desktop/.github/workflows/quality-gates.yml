name: Quality Gates

on:
  workflow_call:
    inputs:
      strict_mode:
        description: 'Enable strict quality checks'
        required: false
        type: boolean
        default: false

jobs:
  # 代码格式检查
  code-formatting:
    name: Code Formatting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/tauri-desktop/package-lock.json

      - name: Install frontend dependencies
        working-directory: apps/tauri-desktop
        run: npm ci

      - name: Check Rust formatting
        working-directory: apps/tauri-desktop/src-tauri
        run: |
          if ! cargo fmt --all -- --check; then
            echo "❌ Rust code formatting issues found"
            echo "Run 'cargo fmt' to fix formatting issues"
            exit 1
          fi
          echo "✅ Rust code formatting is correct"

      - name: Check TypeScript/JavaScript formatting
        working-directory: apps/tauri-desktop
        run: |
          if ! npm run lint:check; then
            echo "❌ Frontend code formatting issues found"
            echo "Run 'npm run lint:fix' to fix formatting issues"
            exit 1
          fi
          echo "✅ Frontend code formatting is correct"

      - name: Check Prettier formatting
        working-directory: apps/tauri-desktop
        run: |
          if ! npx prettier --check "src/**/*.{ts,tsx,js,jsx,css,md}"; then
            echo "❌ Prettier formatting issues found"
            echo "Run 'npx prettier --write .' to fix formatting issues"
            exit 1
          fi
          echo "✅ Prettier formatting is correct"

  # 代码质量分析
  code-analysis:
    name: Code Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/tauri-desktop/package-lock.json

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install frontend dependencies
        working-directory: apps/tauri-desktop
        run: npm ci

      - name: Run Clippy (Rust linting)
        working-directory: apps/tauri-desktop/src-tauri
        run: |
          if [ "${{ inputs.strict_mode }}" = "true" ]; then
            cargo clippy --all-targets --all-features -- -D warnings -D clippy::all
          else
            cargo clippy --all-targets --all-features -- -D warnings
          fi

      - name: Run ESLint (TypeScript linting)
        working-directory: apps/tauri-desktop
        run: |
          if [ "${{ inputs.strict_mode }}" = "true" ]; then
            npm run lint -- --max-warnings 0
          else
            npm run lint
          fi

      - name: Run TypeScript compiler check
        working-directory: apps/tauri-desktop
        run: npm run type-check

      - name: Check for TODO/FIXME comments
        if: inputs.strict_mode
        run: |
          echo "Checking for TODO/FIXME comments in strict mode..."
          if grep -r "TODO\|FIXME" apps/tauri-desktop/src apps/tauri-desktop/src-tauri/src --exclude-dir=node_modules; then
            echo "❌ TODO/FIXME comments found in strict mode"
            exit 1
          fi
          echo "✅ No TODO/FIXME comments found"

  # 安全扫描
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/tauri-desktop/package-lock.json

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run Rust security audit
        working-directory: apps/tauri-desktop/src-tauri
        run: |
          echo "Running Rust security audit..."
          if ! cargo audit; then
            echo "❌ Rust security vulnerabilities found"
            if [ "${{ inputs.strict_mode }}" = "true" ]; then
              exit 1
            else
              echo "⚠️ Continuing in non-strict mode"
            fi
          fi
          echo "✅ Rust security audit passed"

      - name: Install frontend dependencies
        working-directory: apps/tauri-desktop
        run: npm ci

      - name: Run npm security audit
        working-directory: apps/tauri-desktop
        run: |
          echo "Running npm security audit..."
          if [ "${{ inputs.strict_mode }}" = "true" ]; then
            npm audit --audit-level=low
          else
            npm audit --audit-level=high
          fi

      - name: Run Semgrep security scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/rust
            p/typescript
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

  # 依赖检查
  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/tauri-desktop/package-lock.json

      - name: Install dependencies
        working-directory: apps/tauri-desktop
        run: npm ci

      - name: Check for outdated dependencies
        working-directory: apps/tauri-desktop
        run: |
          echo "Checking for outdated npm dependencies..."
          npm outdated || true
          
          echo "Checking for outdated Rust dependencies..."
          cd src-tauri
          cargo install cargo-outdated
          cargo outdated || true

      - name: Check dependency licenses
        working-directory: apps/tauri-desktop
        run: |
          echo "Checking dependency licenses..."
          npx license-checker --summary
          
          # Check for problematic licenses
          if npx license-checker --excludePackages "$(cat package.json | jq -r '.name')" --failOn "GPL;AGPL;LGPL;CPAL;OSL;EPL;MPL" 2>/dev/null; then
            echo "✅ No problematic licenses found"
          else
            echo "⚠️ Potentially problematic licenses detected"
            if [ "${{ inputs.strict_mode }}" = "true" ]; then
              echo "❌ Failing in strict mode due to license issues"
              exit 1
            fi
          fi

      - name: Check bundle size
        working-directory: apps/tauri-desktop
        run: |
          npm run build
          
          # Check frontend bundle size
          bundle_size=$(du -sb dist/ | cut -f1)
          max_bundle_size=$((10 * 1024 * 1024))  # 10MB limit
          
          echo "Frontend bundle size: $(($bundle_size / 1024 / 1024))MB"
          
          if [ "$bundle_size" -gt "$max_bundle_size" ]; then
            echo "❌ Frontend bundle size exceeds 10MB limit"
            if [ "${{ inputs.strict_mode }}" = "true" ]; then
              exit 1
            else
              echo "⚠️ Continuing in non-strict mode"
            fi
          else
            echo "✅ Frontend bundle size is within limits"
          fi

  # 代码复杂度分析
  complexity-analysis:
    name: Complexity Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/tauri-desktop/package-lock.json

      - name: Install dependencies
        working-directory: apps/tauri-desktop
        run: npm ci

      - name: Install complexity analysis tools
        run: |
          npm install -g complexity-report
          cargo install tokei

      - name: Analyze code complexity (Frontend)
        working-directory: apps/tauri-desktop
        run: |
          echo "Analyzing frontend code complexity..."
          complexity-report -o complexity-report.json -f json src/
          
          # Check complexity thresholds
          max_complexity=10
          if [ "${{ inputs.strict_mode }}" = "true" ]; then
            max_complexity=8
          fi
          
          high_complexity=$(jq ".reports[] | select(.complexity.cyclomatic > $max_complexity) | .path" complexity-report.json | wc -l)
          
          if [ "$high_complexity" -gt 0 ]; then
            echo "❌ Found $high_complexity files with high complexity (>$max_complexity)"
            jq ".reports[] | select(.complexity.cyclomatic > $max_complexity) | {path: .path, complexity: .complexity.cyclomatic}" complexity-report.json
            if [ "${{ inputs.strict_mode }}" = "true" ]; then
              exit 1
            fi
          else
            echo "✅ All files have acceptable complexity"
          fi

      - name: Analyze code metrics (Rust)
        working-directory: apps/tauri-desktop/src-tauri
        run: |
          echo "Analyzing Rust code metrics..."
          tokei --output json > tokei-report.json
          
          # Display code statistics
          tokei
          
          # Check for large files
          find src/ -name "*.rs" -size +1000c | while read file; do
            lines=$(wc -l < "$file")
            if [ "$lines" -gt 500 ]; then
              echo "⚠️ Large file detected: $file ($lines lines)"
              if [ "${{ inputs.strict_mode }}" = "true" ] && [ "$lines" -gt 1000 ]; then
                echo "❌ File too large in strict mode: $file"
                exit 1
              fi
            fi
          done

      - name: Upload complexity reports
        uses: actions/upload-artifact@v3
        with:
          name: complexity-reports
          path: |
            apps/tauri-desktop/complexity-report.json
            apps/tauri-desktop/src-tauri/tokei-report.json
          retention-days: 30

  # 质量门禁汇总
  quality-summary:
    name: Quality Summary
    needs: [code-formatting, code-analysis, security-scan, dependency-check, complexity-analysis]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check all quality gates
        run: |
          echo "# 🎯 Quality Gates Summary" > quality-summary.md
          echo "" >> quality-summary.md
          echo "Generated on: $(date)" >> quality-summary.md
          echo "" >> quality-summary.md
          
          # Check each job status
          formatting_status="${{ needs.code-formatting.result }}"
          analysis_status="${{ needs.code-analysis.result }}"
          security_status="${{ needs.security-scan.result }}"
          dependency_status="${{ needs.dependency-check.result }}"
          complexity_status="${{ needs.complexity-analysis.result }}"
          
          echo "## 📊 Quality Checks Results" >> quality-summary.md
          echo "" >> quality-summary.md
          
          if [ "$formatting_status" = "success" ]; then
            echo "✅ **Code Formatting**: Passed" >> quality-summary.md
          else
            echo "❌ **Code Formatting**: Failed" >> quality-summary.md
          fi
          
          if [ "$analysis_status" = "success" ]; then
            echo "✅ **Code Analysis**: Passed" >> quality-summary.md
          else
            echo "❌ **Code Analysis**: Failed" >> quality-summary.md
          fi
          
          if [ "$security_status" = "success" ]; then
            echo "✅ **Security Scan**: Passed" >> quality-summary.md
          else
            echo "❌ **Security Scan**: Failed" >> quality-summary.md
          fi
          
          if [ "$dependency_status" = "success" ]; then
            echo "✅ **Dependency Check**: Passed" >> quality-summary.md
          else
            echo "❌ **Dependency Check**: Failed" >> quality-summary.md
          fi
          
          if [ "$complexity_status" = "success" ]; then
            echo "✅ **Complexity Analysis**: Passed" >> quality-summary.md
          else
            echo "❌ **Complexity Analysis**: Failed" >> quality-summary.md
          fi
          
          echo "" >> quality-summary.md
          
          # Overall status
          if [ "$formatting_status" = "success" ] && [ "$analysis_status" = "success" ] && [ "$security_status" = "success" ] && [ "$dependency_status" = "success" ] && [ "$complexity_status" = "success" ]; then
            echo "## 🎉 Overall Status: **PASSED**" >> quality-summary.md
            echo "All quality gates have been successfully passed!" >> quality-summary.md
          else
            echo "## ⚠️ Overall Status: **FAILED**" >> quality-summary.md
            echo "One or more quality gates have failed. Please review and fix the issues." >> quality-summary.md
          fi

      - name: Upload quality summary
        uses: actions/upload-artifact@v3
        with:
          name: quality-summary
          path: quality-summary.md
          retention-days: 30

      - name: Fail if quality gates failed
        if: needs.code-formatting.result != 'success' || needs.code-analysis.result != 'success' || needs.security-scan.result != 'success' || needs.dependency-check.result != 'success' || needs.complexity-analysis.result != 'success'
        run: |
          echo "❌ Quality gates failed"
          exit 1
