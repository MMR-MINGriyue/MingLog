name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # 代码质量检查
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/tauri-desktop/package-lock.json

      - name: Install frontend dependencies
        working-directory: apps/tauri-desktop
        run: npm ci

      - name: Check Rust formatting
        working-directory: apps/tauri-desktop/src-tauri
        run: cargo fmt --all -- --check

      - name: Run Clippy
        working-directory: apps/tauri-desktop/src-tauri
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Check TypeScript formatting
        working-directory: apps/tauri-desktop
        run: npm run lint

      - name: Type check
        working-directory: apps/tauri-desktop
        run: npm run type-check

  # 安全扫描
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        working-directory: apps/tauri-desktop/src-tauri
        run: cargo audit

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/tauri-desktop/package-lock.json

      - name: Install frontend dependencies
        working-directory: apps/tauri-desktop
        run: npm ci

      - name: Run npm audit
        working-directory: apps/tauri-desktop
        run: npm audit --audit-level=moderate

  # 单元测试
  unit-tests:
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolset@stable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/tauri-desktop/package-lock.json

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install frontend dependencies
        working-directory: apps/tauri-desktop
        run: npm ci

      - name: Run Rust tests
        working-directory: apps/tauri-desktop/src-tauri
        run: cargo test --verbose

      - name: Run frontend tests
        working-directory: apps/tauri-desktop
        run: npm test

      - name: Generate test coverage
        if: matrix.os == 'ubuntu-latest'
        working-directory: apps/tauri-desktop/src-tauri
        run: |
          cargo install cargo-tarpaulin
          cargo tarpaulin --out xml --output-dir coverage

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v3
        with:
          file: apps/tauri-desktop/src-tauri/coverage/cobertura.xml
          flags: rust
          name: rust-coverage

  # 构建测试
  build-test:
    name: Build Test
    runs-on: ${{ matrix.os }}
    needs: [code-quality, security-scan, unit-tests]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/tauri-desktop/package-lock.json

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install frontend dependencies
        working-directory: apps/tauri-desktop
        run: npm ci

      - name: Build frontend
        working-directory: apps/tauri-desktop
        run: npm run build

      - name: Build Tauri app (Debug)
        working-directory: apps/tauri-desktop
        run: npm run tauri build -- --debug

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.os }}
          path: |
            apps/tauri-desktop/src-tauri/target/debug/bundle/
          retention-days: 7

  # E2E 测试
  e2e-tests:
    name: E2E Tests
    runs-on: ${{ matrix.os }}
    needs: [build-test]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/tauri-desktop/package-lock.json

      - name: Install dependencies
        working-directory: apps/tauri-desktop
        run: npm ci

      - name: Install Playwright
        working-directory: apps/tauri-desktop
        run: npx playwright install

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-${{ matrix.os }}
          path: apps/tauri-desktop/src-tauri/target/debug/bundle/

      - name: Run E2E tests
        working-directory: apps/tauri-desktop
        run: npm run test:e2e

      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-results-${{ matrix.os }}
          path: |
            apps/tauri-desktop/test-results/
            apps/tauri-desktop/playwright-report/
          retention-days: 7

  # 性能测试
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [build-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/tauri-desktop/package-lock.json

      - name: Install dependencies
        working-directory: apps/tauri-desktop
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-ubuntu-latest
          path: apps/tauri-desktop/src-tauri/target/debug/bundle/

      - name: Run performance tests
        working-directory: apps/tauri-desktop
        run: npm run test:performance

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: apps/tauri-desktop/performance-results/
          retention-days: 30
