name: Test Suite

on:
  workflow_call:
    inputs:
      test_type:
        description: 'Type of tests to run (unit, integration, e2e, performance, all)'
        required: false
        type: string
        default: 'all'
      coverage_threshold:
        description: 'Minimum code coverage percentage'
        required: false
        type: number
        default: 80

jobs:
  # 单元测试
  unit-tests:
    name: Unit Tests
    if: inputs.test_type == 'unit' || inputs.test_type == 'all'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/tauri-desktop/package-lock.json

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install frontend dependencies
        working-directory: apps/tauri-desktop
        run: npm ci

      - name: Install cargo-llvm-cov
        run: cargo install cargo-llvm-cov

      - name: Run Rust unit tests with coverage
        working-directory: apps/tauri-desktop/src-tauri
        run: |
          cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
          cargo llvm-cov report --html --output-dir coverage-html

      - name: Run frontend unit tests with coverage
        working-directory: apps/tauri-desktop
        run: |
          npm run test:coverage

      - name: Check coverage threshold (Rust)
        working-directory: apps/tauri-desktop/src-tauri
        run: |
          coverage=$(cargo llvm-cov report --summary-only | grep -oP 'TOTAL.*\K\d+(?=\.\d+%)' || echo "0")
          echo "Rust coverage: ${coverage}%"
          if [ "$coverage" -lt "${{ inputs.coverage_threshold }}" ]; then
            echo "❌ Rust coverage ${coverage}% is below threshold ${{ inputs.coverage_threshold }}%"
            exit 1
          else
            echo "✅ Rust coverage ${coverage}% meets threshold ${{ inputs.coverage_threshold }}%"
          fi

      - name: Upload Rust coverage to Codecov
        if: matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v3
        with:
          file: apps/tauri-desktop/src-tauri/lcov.info
          flags: rust-unit
          name: rust-unit-coverage

      - name: Upload frontend coverage to Codecov
        if: matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v3
        with:
          file: apps/tauri-desktop/coverage/lcov.info
          flags: frontend-unit
          name: frontend-unit-coverage

      - name: Upload coverage reports
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports-${{ matrix.os }}
          path: |
            apps/tauri-desktop/src-tauri/coverage-html/
            apps/tauri-desktop/coverage/
          retention-days: 30

  # 集成测试
  integration-tests:
    name: Integration Tests
    if: inputs.test_type == 'integration' || inputs.test_type == 'all'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/tauri-desktop/package-lock.json

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install dependencies
        working-directory: apps/tauri-desktop
        run: npm ci

      - name: Setup test database
        run: |
          # 创建测试数据库
          mkdir -p test-data
          echo "Setting up test database..."

      - name: Run integration tests (Rust)
        working-directory: apps/tauri-desktop/src-tauri
        env:
          RUST_LOG: debug
          TEST_DATABASE_URL: sqlite://test-data/test.db
        run: cargo test --test integration_tests -- --test-threads=1

      - name: Run integration tests (Frontend)
        working-directory: apps/tauri-desktop
        env:
          NODE_ENV: test
        run: npm run test:integration

      - name: Upload integration test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-results-${{ matrix.os }}
          path: |
            apps/tauri-desktop/src-tauri/target/debug/deps/integration_tests-*
            apps/tauri-desktop/test-results/integration/
          retention-days: 7

  # E2E 测试
  e2e-tests:
    name: E2E Tests
    if: inputs.test_type == 'e2e' || inputs.test_type == 'all'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/tauri-desktop/package-lock.json

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf xvfb

      - name: Install dependencies
        working-directory: apps/tauri-desktop
        run: npm ci

      - name: Install Playwright
        working-directory: apps/tauri-desktop
        run: npx playwright install --with-deps

      - name: Build app for E2E testing
        working-directory: apps/tauri-desktop
        run: npm run tauri build -- --debug

      - name: Run E2E tests
        working-directory: apps/tauri-desktop
        env:
          HEADLESS: true
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            xvfb-run -a npm run test:e2e
          else
            npm run test:e2e
          fi

      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-test-results-${{ matrix.os }}
          path: |
            apps/tauri-desktop/test-results/
            apps/tauri-desktop/playwright-report/
          retention-days: 7

      - name: Upload E2E videos and screenshots
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-media-${{ matrix.os }}
          path: |
            apps/tauri-desktop/test-results/videos/
            apps/tauri-desktop/test-results/screenshots/
          retention-days: 7

  # 性能测试
  performance-tests:
    name: Performance Tests
    if: inputs.test_type == 'performance' || inputs.test_type == 'all'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/tauri-desktop/package-lock.json

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install dependencies
        working-directory: apps/tauri-desktop
        run: npm ci

      - name: Build optimized app
        working-directory: apps/tauri-desktop
        run: npm run tauri build

      - name: Run performance benchmarks (Rust)
        working-directory: apps/tauri-desktop/src-tauri
        run: |
          cargo install cargo-criterion
          cargo criterion --output-format html

      - name: Run performance tests (Frontend)
        working-directory: apps/tauri-desktop
        run: npm run test:performance

      - name: Analyze bundle size
        working-directory: apps/tauri-desktop
        run: |
          npm run analyze-bundle
          
          # Check bundle size limits
          bundle_size=$(du -sb dist/ | cut -f1)
          max_size=$((50 * 1024 * 1024))  # 50MB limit
          
          if [ "$bundle_size" -gt "$max_size" ]; then
            echo "❌ Bundle size ${bundle_size} bytes exceeds limit ${max_size} bytes"
            exit 1
          else
            echo "✅ Bundle size ${bundle_size} bytes is within limit"
          fi

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: |
            apps/tauri-desktop/src-tauri/target/criterion/
            apps/tauri-desktop/performance-results/
            apps/tauri-desktop/bundle-analyzer-report.html
          retention-days: 30

  # 测试报告汇总
  test-summary:
    name: Test Summary
    needs: [unit-tests, integration-tests, e2e-tests, performance-tests]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Download all test artifacts
        uses: actions/download-artifact@v3

      - name: Generate test summary
        run: |
          echo "# 🧪 Test Summary Report" > test-summary.md
          echo "" >> test-summary.md
          echo "Generated on: $(date)" >> test-summary.md
          echo "" >> test-summary.md
          
          # Unit tests summary
          echo "## 📊 Unit Tests" >> test-summary.md
          if [ -d "coverage-reports-ubuntu-latest" ]; then
            echo "✅ Unit tests completed with coverage reports" >> test-summary.md
          else
            echo "❌ Unit tests failed or no coverage reports" >> test-summary.md
          fi
          echo "" >> test-summary.md
          
          # Integration tests summary
          echo "## 🔗 Integration Tests" >> test-summary.md
          if ls integration-test-results-* 1> /dev/null 2>&1; then
            echo "✅ Integration tests completed" >> test-summary.md
          else
            echo "❌ Integration tests failed" >> test-summary.md
          fi
          echo "" >> test-summary.md
          
          # E2E tests summary
          echo "## 🎭 E2E Tests" >> test-summary.md
          if ls e2e-test-results-* 1> /dev/null 2>&1; then
            echo "✅ E2E tests completed" >> test-summary.md
          else
            echo "❌ E2E tests failed" >> test-summary.md
          fi
          echo "" >> test-summary.md
          
          # Performance tests summary
          echo "## ⚡ Performance Tests" >> test-summary.md
          if [ -d "performance-results" ]; then
            echo "✅ Performance tests completed" >> test-summary.md
          else
            echo "❌ Performance tests failed" >> test-summary.md
          fi

      - name: Upload test summary
        uses: actions/upload-artifact@v3
        with:
          name: test-summary-report
          path: test-summary.md
          retention-days: 30

      - name: Comment test summary on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('test-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
